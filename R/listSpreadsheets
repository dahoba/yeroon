

mainFunction <- function(){
    library(RCurl);
    library(rjson);
    library(XML);

    getSpreadList <- function(token){
    	authorization <- paste('AuthSub token="',token,'"',sep="");
    	xmlString <- getURL("https://docs.google.com/feeds/documents/private/full/-/spreadsheet",ssl.verifypeer=F,httpheader=c(authorization=authorization));
    	if(grepl("Invalid AuthSub token",xmlString)){
        stop("Session refused. Please try to log-out and log-in again.");
      }
      return(xmlTreeParse(xmlString)$doc$children$feed)
    }
    
    getChilds <- function(xmlTree,childname){
    	children <- xmlChildren(xmlTree);
    	outList <- children[names(children)==childname];
    	return(outList);
    }
    
    myToken <- fromJSON(POST$inputList)$token;
    
    outputList <- list(entries=list());
    myList <- getSpreadList(myToken);
    myEntries <- getChilds(myList,"entry");
    
    if(length(myEntries)==0){
      stop("No spreadsheets were found in your google documents folder.");     
    }
    
    for(i in 1:length(myEntries)){
      outputList$entries[[i]] <- vector();
    	outputList$entries[[i]][1] <- sub("spreadsheet:","",toString(xmlChildren(xmlChildren(myEntries[[i]])$resourceId)$text));
    	outputList$entries[[i]][2] <- toString(xmlChildren(xmlChildren(myEntries[[i]])$title)$text);
    	outputList$entries[[i]][3] <- substr(sub("spreadsheet:","",toString(xmlChildren(xmlChildren(myEntries[[i]])$published)$text)),0,10);
    	outputList$entries[[i]][4] <- toString(xmlChildren(xmlChildren(xmlChildren(myEntries[[i]])$author)$name)$text);
    	outputList$entries[[i]][5] <- toString(xmlChildren(xmlChildren(xmlChildren(myEntries[[i]])$author)$email)$text);
    	outputList$entries[[i]][6] <- toString(xmlAttrs(getChilds(myEntries[[i]],"link")[[1]])[[3]]);
    }
    
    #encode json:
    cat("{success:true, output:",toJSON(outputList), "}",sep="");
}

printFailure <- function(e){
    errorString <- toString(e$message);
    errorString <- gsub("\"","'",errorString);
    errorString <- gsub("\n"," ",errorString);
    cat("{success:false, error:\"",errorString,"\"}",sep="");
}

#EXECUTED:
setTimeLimit(elapsed=60);
mem.limits(vsize=500*1024*1024);

setContentType('text/html');
tryCatch(mainFunction(), error = function(e){printFailure(e)});

setTimeLimit();

